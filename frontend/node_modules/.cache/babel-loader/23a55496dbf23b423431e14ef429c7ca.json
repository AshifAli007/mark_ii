{"ast":null,"code":"'use strict';\n\nconst handlePreserveConsecutiveUppercase = (decamelized, separator) => {\n  // Lowercase all single uppercase characters. As we\n  // want to preserve uppercase sequences, we cannot\n  // simply lowercase the separated string at the end.\n  // `data_For_USACounties` → `data_for_USACounties`\n  decamelized = decamelized.replace(/((?<![\\p{Uppercase_Letter}\\d])[\\p{Uppercase_Letter}\\d](?![\\p{Uppercase_Letter}\\d]))/gu, $0 => {\n    return $0.toLowerCase();\n  }); // Remaining uppercase sequences will be separated from lowercase sequences.\n  // `data_For_USACounties` → `data_for_USA_counties`\n\n  return decamelized.replace(/(\\p{Uppercase_Letter}+)(\\p{Uppercase_Letter}\\p{Lowercase_Letter}+)/gu, (_, $1, $2) => {\n    return $1 + separator + $2.toLowerCase();\n  });\n};\n\nmodule.exports = (text, {\n  separator = '_',\n  preserveConsecutiveUppercase = false\n} = {}) => {\n  if (!(typeof text === 'string' && typeof separator === 'string')) {\n    throw new TypeError('The `text` and `separator` arguments should be of type `string`');\n  } // Checking the second character is done later on. Therefore process shorter strings here.\n\n\n  if (text.length < 2) {\n    return preserveConsecutiveUppercase ? text : text.toLowerCase();\n  }\n\n  const replacement = `$1${separator}$2`; // Split lowercase sequences followed by uppercase character.\n  // `dataForUSACounties` → `data_For_USACounties`\n  // `myURLstring → `my_URLstring`\n\n  const decamelized = text.replace(/([\\p{Lowercase_Letter}\\d])(\\p{Uppercase_Letter})/gu, replacement);\n\n  if (preserveConsecutiveUppercase) {\n    return handlePreserveConsecutiveUppercase(decamelized, separator);\n  } // Split multiple uppercase characters followed by one or more lowercase characters.\n  // `my_URLstring` → `my_url_string`\n\n\n  return decamelized.replace(/(\\p{Uppercase_Letter}+)(\\p{Uppercase_Letter}\\p{Lowercase_Letter}+)/gu, replacement).toLowerCase();\n};","map":{"version":3,"sources":["/home/arif/Documents/githubProjects/mark_ii/node_modules/decamelize/index.js"],"names":["handlePreserveConsecutiveUppercase","decamelized","separator","replace","$0","toLowerCase","_","$1","$2","module","exports","text","preserveConsecutiveUppercase","TypeError","length","replacement"],"mappings":"AAAA;;AAEA,MAAMA,kCAAkC,GAAG,CAACC,WAAD,EAAcC,SAAd,KAA4B;AACtE;AACA;AACA;AACA;AACAD,EAAAA,WAAW,GAAGA,WAAW,CAACE,OAAZ,CACb,uFADa,EAEbC,EAAE,IAAI;AACL,WAAOA,EAAE,CAACC,WAAH,EAAP;AACA,GAJY,CAAd,CALsE,CAYtE;AACA;;AACA,SAAOJ,WAAW,CAACE,OAAZ,CACN,sEADM,EAEN,CAACG,CAAD,EAAIC,EAAJ,EAAQC,EAAR,KAAe;AACd,WAAOD,EAAE,GAAGL,SAAL,GAAiBM,EAAE,CAACH,WAAH,EAAxB;AACA,GAJK,CAAP;AAMA,CApBD;;AAsBAI,MAAM,CAACC,OAAP,GAAiB,CAChBC,IADgB,EAEhB;AACCT,EAAAA,SAAS,GAAG,GADb;AAECU,EAAAA,4BAA4B,GAAG;AAFhC,IAGI,EALY,KAMZ;AACJ,MAAI,EAAE,OAAOD,IAAP,KAAgB,QAAhB,IAA4B,OAAOT,SAAP,KAAqB,QAAnD,CAAJ,EAAkE;AACjE,UAAM,IAAIW,SAAJ,CACL,iEADK,CAAN;AAGA,GALG,CAOJ;;;AACA,MAAIF,IAAI,CAACG,MAAL,GAAc,CAAlB,EAAqB;AACpB,WAAOF,4BAA4B,GAAGD,IAAH,GAAUA,IAAI,CAACN,WAAL,EAA7C;AACA;;AAED,QAAMU,WAAW,GAAI,KAAIb,SAAU,IAAnC,CAZI,CAcJ;AACA;AACA;;AACA,QAAMD,WAAW,GAAGU,IAAI,CAACR,OAAL,CACnB,oDADmB,EAEnBY,WAFmB,CAApB;;AAKA,MAAIH,4BAAJ,EAAkC;AACjC,WAAOZ,kCAAkC,CAACC,WAAD,EAAcC,SAAd,CAAzC;AACA,GAxBG,CA0BJ;AACA;;;AACA,SAAOD,WAAW,CAChBE,OADK,CAEL,sEAFK,EAGLY,WAHK,EAKLV,WALK,EAAP;AAMA,CAxCD","sourcesContent":["'use strict';\n\nconst handlePreserveConsecutiveUppercase = (decamelized, separator) => {\n\t// Lowercase all single uppercase characters. As we\n\t// want to preserve uppercase sequences, we cannot\n\t// simply lowercase the separated string at the end.\n\t// `data_For_USACounties` → `data_for_USACounties`\n\tdecamelized = decamelized.replace(\n\t\t/((?<![\\p{Uppercase_Letter}\\d])[\\p{Uppercase_Letter}\\d](?![\\p{Uppercase_Letter}\\d]))/gu,\n\t\t$0 => {\n\t\t\treturn $0.toLowerCase();\n\t\t}\n\t);\n\n\t// Remaining uppercase sequences will be separated from lowercase sequences.\n\t// `data_For_USACounties` → `data_for_USA_counties`\n\treturn decamelized.replace(\n\t\t/(\\p{Uppercase_Letter}+)(\\p{Uppercase_Letter}\\p{Lowercase_Letter}+)/gu,\n\t\t(_, $1, $2) => {\n\t\t\treturn $1 + separator + $2.toLowerCase();\n\t\t}\n\t);\n};\n\nmodule.exports = (\n\ttext,\n\t{\n\t\tseparator = '_',\n\t\tpreserveConsecutiveUppercase = false\n\t} = {}\n) => {\n\tif (!(typeof text === 'string' && typeof separator === 'string')) {\n\t\tthrow new TypeError(\n\t\t\t'The `text` and `separator` arguments should be of type `string`'\n\t\t);\n\t}\n\n\t// Checking the second character is done later on. Therefore process shorter strings here.\n\tif (text.length < 2) {\n\t\treturn preserveConsecutiveUppercase ? text : text.toLowerCase();\n\t}\n\n\tconst replacement = `$1${separator}$2`;\n\n\t// Split lowercase sequences followed by uppercase character.\n\t// `dataForUSACounties` → `data_For_USACounties`\n\t// `myURLstring → `my_URLstring`\n\tconst decamelized = text.replace(\n\t\t/([\\p{Lowercase_Letter}\\d])(\\p{Uppercase_Letter})/gu,\n\t\treplacement\n\t);\n\n\tif (preserveConsecutiveUppercase) {\n\t\treturn handlePreserveConsecutiveUppercase(decamelized, separator);\n\t}\n\n\t// Split multiple uppercase characters followed by one or more lowercase characters.\n\t// `my_URLstring` → `my_url_string`\n\treturn decamelized\n\t\t.replace(\n\t\t\t/(\\p{Uppercase_Letter}+)(\\p{Uppercase_Letter}\\p{Lowercase_Letter}+)/gu,\n\t\t\treplacement\n\t\t)\n\t\t.toLowerCase();\n};\n"]},"metadata":{},"sourceType":"script"}